- name: "Setup configuration directories"
  file:
    dest: "{{ lookup('env','HOME') }}/{{ item }}"
    state: directory
  with_items:
    - .config
    - .ssh
    - .local/bin
    - .stack
- name: "Install dotfiles"
  file:
    src: "{{ playbook_dir }}/dotfiles/{{ item.src }}"
    dest: "{{ lookup('env','HOME') }}/{{ item.dest }}"
    state: link
    force: yes
  with_items:
    - src: gitconfig
      dest: .gitconfig
    - src: gitignore
      dest: .gitignore
    - src: config/nvim
      dest: .config/nvim
    - src: config/pycodestyle
      dest: .config/pycodestyle
    - src: config/pylintrc
      dest: .config/pylintrc
    - src: stack/config.yaml
      dest: .stack/config.yaml
    - src: bashrc
      dest: .bashrc
    - src: inputrc
      dest: .inputrc
    - src: profile
      dest: .profile
    - src: tmux.conf
      dest: .tmux.conf
    - src: Xresources
      dest: .Xresources
- name: "Install helper executables"
  copy:
    src: mount_share
    dest: "{{ lookup('env','HOME') }}/.local/bin/mount_share"
    mode: preserve
- name: ssh-config
  template:
    src: templates/ssh-config
    dest: "{{ lookup('env','HOME') }}/.ssh/config"
  vars:
    testbeds:
      - alpha
      - bravo
      - charlie
      - delta
      - dpoe-lite5
      - dpoe-lite6
      - dpoe-lite7
      - dpoe-lite8
      - dpoe-lite9
      - dpoe-lite10
      - dpoe-lite11
      - dpoe-lite12
      - dpoe1
      - dpoe2
      - dpoe3
      - dpoe-scale1
      - dpoe-fbw1
- name: Install apt transport https
  become: yes
  apt:
    name: apt-transport-https
- name: Prepare docker repo key
  become: yes
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    id: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
- name: Prepare docker repo
  become: yes
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release|lower }} stable"
    filename: docker-ce
- name: Add neovim PPA
  become: yes
  apt_repository:
    repo: ppa:neovim-ppa/stable
- name: Add universe repo
  become: yes
  apt_repository:
    repo: "deb http://us.archive.ubuntu.com/ubuntu {{ ansible_distribution_release|lower }} universe"
    state: present
- name: Update apt packages
  become: yes
  apt:
    upgrade: dist
    update_cache: yes
- name: Install apt packages 
  become: yes
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - build-essential
    - cowsay
    - curl
    - docker-ce
    - gdb-multiarch
    - git
    - htop
    - libssl1.0-dev
    - neovim
    - openssh-server
    - pandoc
    - pkg-config
    - python3-pip
    - python3-venv
    - ruby
    - ruby-bundler
    - ruby-dev
    - sl
    - shellcheck
    - sshfs
    - tmux
    - tree
    - virtualenvwrapper
    - wireshark
    - xclip
- name: Remove apt packages 
  become: yes
  apt:
    name: "{{ packages }}"
    state: absent
  vars:
    packages:
    - owncloud-client
    - thunderbird
- name: Add user to docker group
  become: yes
  user:
    name: "{{ lookup('env', 'USER') }}"
    groups: docker
    append: yes
- name: Install python packages
  pip:
    name: "{{ packages }}"
    executable: pip3
    extra_args: --user
    state: latest
  vars:
    packages:
      - black
      - neovim
      - poetry
      - pre-commit
      - pycodestyle
      - pylama
      - pylint
      - python-language-server
      - virtualenv
- name: Install neovim ruby extension
  gem:
    name: neovim
    state: latest
- name: Install rust
  shell: "curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path && rustup component add rls rust-src"
  args:
    creates: "{{ lookup('env', 'HOME') }}/.cargo/bin/rustc"
- name: Update rust
  shell: "rustup update"
- name: Install ripgrep
  command: cargo install ripgrep
  args:
    creates: "{{ lookup('env', 'HOME') }}/.cargo/bin/rg"
- name: Install cargo-xbuild
  command: cargo install cargo-xbuild
  args:
    creates: "{{ lookup('env', 'HOME') }}/.cargo/bin/cargo-xbuild"
- name: Install cargo-edit
  command: cargo install cargo-edit
  args:
    creates: "{{ lookup('env', 'HOME') }}/.cargo/bin/cargo-add"
- name: Neovim plugin update
  shell: nvim -E -c PlugInstall -c qa
- name: Neovim plugin update
  shell: nvim -E -c PlugUpdate -c qa
- name: Neovim remote plugin update
  shell: nvim -E -c UpdateRemotePlugins -c qa
